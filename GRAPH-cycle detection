#include <bits/stdc++.h>
using namespace std;
void add_edge(vector<int>g[],int u,int v){
    g[u].push_back(v);
    g[v].push_back(u);
}
bool linear(vector<int>pata,int kya)
{
    for(int i=0;i<pata.size();i++){
        if(kya == pata[i])return true;
    }
    return false;
}
void dfs(vector<int>g[],int source,int node){
    stack<int>s;
    vector<int>pata;
    bool visited[node];
    for(int i=0;i<node;i++) visited[i]=false;
    s.push(source);
    while(!s.empty())
    {     int top=s.top();
             s.pop();
        if(!visited[top])
        {
            //cout<<top;
            visited[top]=true;
        }
        for(auto x: g[top])
        {
            if(!visited[x]){
                  if(!linear(pata,x)){
                      s.push(x); pata.push_back(x);}
                    else{
                        cout<<"cycle detected";
                        return ;
                    }
            }
          
        }
    }
    cout<<"cycle not detected";
 
    
}
int main() {
	int node;
	cin>>node;
	vector<int>g[node];
	int edge;
	cin>>edge;
	for(int i=1;i<=edge;i++)
{
    int u,v;
    cin>>u>>v;
    add_edge(g,u,v);
}   
    dfs(g,0,node);

	return 0;
}
